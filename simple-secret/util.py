import gnupg
import config
import os
import base64
import urllib

def generate_gpg_key(passphrase):
    gpg = gnupg.GPG(gnupghome=config.GPG_HOME)

    key_info = gen_key_info(
        gpg=gpg,
        name=config.NAME,
        email=config.EMAIL,
        passphrase=passphrase,
        )

    print('Generating Key, go do something random...')
    key = gpg.gen_key(key_info)
    self_fp = key.fingerprint
    return gpg, self_fp

def get_gpg_key(passphrase):
    gpg = gnupg.GPG(gnupghome=config.GPG_HOME)
    if not gpg.list_keys(secret=True):
        raise Exception('Probably bad passphrase')
    self_fp = gpg.list_keys(secret=True)[0]['fingerprint']
    return gpg, self_fp

def gen_key_info(gpg, name, email, passphrase):
    input_data = gpg.gen_key_input(
        key_type=config.GPG_KEY_TYPE,
        key_length=config.GPG_KEY_LENGTH,
        name_real=name,
        name_email=email,
        name_comment='Autogenerated Key',
        #subkey_type=GPG_KEY_TYPE,
        #subkey_length=GPG_KEY_LENGTH,
        expire_date=0,
        passphrase=passphrase,
        )
    return input_data

def print_decrypted_info(decrypted):
    print('User name: %s' % decrypted.username)
    print('Key id: %s' % decrypted.key_id)
    print('Signature id: %s' % decrypted.signature_id)
    #print('Signature timestamp: %s' % decrypted.sig_timestamp)
    print('Fingerprint: %s' % decrypted.fingerprint)
    print('Trust level: %s' % decrypted_data.trust_text)
    print('Data: %s' % decrypted)

def get_or_gen_gpg(passphrase):
    if os.path.isdir(config.GPG_HOME):
        return get_gpg_key(passphrase)
    else:
        return generate_gpg_key(passphrase)

def generate_random_string(length=32):
    rand = os.urandom(length)
    return urllib.quote(base64.b64encode(rand))
